;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of simple english
;;; created at:
;;;     Sat May 08 16:13:43 UTC 2021
;;; based on Matrix customization system version of:
;;;     Fri Feb  5 21:00:23 UTC 2021
;;;
;;; A very simple English grammar. 
;;; Version 12: Saxon genitive
;;; Version 13: Norman genitive
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT -,
             LOCAL.CAT.MC #mc ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head :+ [ PRON bool,
    AUX bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form ].

inflected :+ [ NUM-FLAG luk,
    TMP-FLAG luk,
    POSS-FLAG luk ].

infl-satisfied :+ [ NUM-FLAG na-or-+,
    TMP-FLAG na-or-+,
    POSS-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Possession

possessive-2 := possessive.  ; supertype for strategy 2
possessor-2 := possessor & possessive-2.
possessum-2 := possessum & possessive-2.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
present_participle := nonfinite.
past_participle := nonfinite.
infinitive := nonfinite.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

perfective := aspect.
imperfective := aspect.
progressive := imperfective.

;;; Mood

subjunctive := mood.
indicative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item & poss-rule-dtr &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT - ] > ] ].

CommonNoun-noun-lex := noun-lex &
  [ INFLECTED [ NUM-FLAG -,
                POSS-FLAG - ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD verb,
             L-QUE - ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

trans-v-verb-lex := full-verb-verb-lex & transitive-verb-lex.

intrans-v-verb-lex := full-verb-verb-lex & intransitive-verb-lex.

full-verb-verb-lex := verb-lex &
  [ INFLECTED.TMP-FLAG - ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

progr-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE present,
                                       MOOD indicative,
                                       ASPECT progressive ],
                   CAT [ HEAD.FORM finite,
                         VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                      PER 3rd ],
                               COMPS.FIRST.LOCAL.CAT.HEAD.FORM present_participle ] ] ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

perf-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT perfective ],
                   CAT [ HEAD.FORM finite,
                         VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                      PER 3rd ],
                               COMPS.FIRST.LOCAL.CAT.HEAD.FORM past_participle ] ] ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

fut-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ MOOD indicative,
                                       TENSE future ],
                   CAT [ HEAD.FORM finite,
                         VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infinitive ] ] ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

possibility-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E [ TENSE present,
                                       MOOD indicative ],
                   CAT [ HEAD.FORM finite,
                         VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infinitive ] ] ].

necessity-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infinitive ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

def-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

;;; Adverbs

two-rel-adposition-lex := basic-icons-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD adp,
                           VAL.COMPS < [ LOCAL [ CAT cat-sat,
                                                 CONT.HOOK #hook &
                                                           [ INDEX #ind,
                                                             ICONS-KEY.IARG1 #clause ] ] ] > ],
                     CONT.HOOK #hook &
                               [ CLAUSE-KEY #clause ] ],
             LKEYS.KEYREL arg12-ev-relation &
                          [ ARG2 #ind ] ] ].

possessor-adp-lex-2 := two-rel-adposition-lex &
  [ SYNSEM.LOCAL [ CAT [ POSTHEAD +,
                         VAL [ SPEC < >,
                               SUBJ < >,
                               SPR < >,
                               COMPS.FIRST [ OPT -,
                                             LOCAL [ CAT [ VAL.SPR < >,
                                                           HEAD noun &
                                                                [ PRON - ] ],
                                                     CONT.HOOK.INDEX #possessor ] ] ],
                         HEAD [ POSSESSOR possessor-2,
                                MOD.FIRST.LOCAL [ CAT [ VAL.SPR < [ ] >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK [ INDEX #possessum,
                                                              LTOP #lbl ] ] ] ],
                   CONT [ ICONS.LIST < >,
                          HCONS.LIST < >,
                          RELS.LIST < arg12-ev-relation &
                                      [ PRED "poss_rel",
                                        LBL #lbl,
                                        ARG1 #possessum,
                                        ARG2 #possessor ] > ] ] ].

basic-adposition-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

poss-rule-dtr := word-or-lexrule.

;;; Lexical rule types

num-lex-rule-super := add-only-no-ccont-rule & poss-rule-dtr &
  [ INFLECTED [ NUM-FLAG +,
                TMP-FLAG #tmp,
                POSS-FLAG #poss ],
    DTR CommonNoun-noun-lex &
        [ INFLECTED [ TMP-FLAG #tmp,
                      POSS-FLAG #poss ] ] ].

plural-lex-rule := infl-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

singular-lex-rule := const-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

poss-lex-rule-super := lex-rule &
  [ INFLECTED [ POSS-FLAG +,
                NUM-FLAG #num,
                TMP-FLAG #tmp ],
    DTR poss-rule-dtr &
        [ INFLECTED [ NUM-FLAG #num,
                      TMP-FLAG #tmp ] ] ].

possessor-lex-rule-1 := head-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD noun &
                          [ POSSESSOR possessor-1 ] ].

saxon-genitive-lex-rule := infl-lex-rule & poss-lex-rule-super & possessor-lex-rule-1.

nonpossessive-lex-rule-1 := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ POSSESSOR nonpossessive ],
                       POSSESSUM nonpossessive ] ].

non-poss-lex-rule := const-lex-rule & nonpossessive-lex-rule-1 & poss-lex-rule-super.

tmp-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ TMP-FLAG +,
                NUM-FLAG #num,
                POSS-FLAG #poss ],
    DTR full-verb-verb-lex &
        [ INFLECTED [ NUM-FLAG #num,
                      POSS-FLAG #poss ] ] ].

ind-lex-rule := tmp-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD indicative,
                   CAT.HEAD.FORM finite ] ].

pres-lex-rule := ind-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

pst-lex-rule := ind-lex-rule & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

3-sg-lex-rule := infl-lex-rule & tmp-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM singular ] ].

3-pl-lex-rule := const-lex-rule & tmp-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM plural ] ].

pres-3sg-lex-rule := 3-sg-lex-rule & pres-lex-rule.

pres-3pl-lex-rule := 3-pl-lex-rule & pres-lex-rule.

pres-part-lex-rule := infl-lex-rule & tmp-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM present_participle ].

past-part-lex-rule := infl-lex-rule & tmp-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM past_participle ].

inf-lex-rule := const-lex-rule & tmp-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM infinitive ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

poss-unary-phrase-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] >,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < >,
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD +np ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

possessum-mod-rule := basic-head-mod-phrase-simple &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

head-adj-int-phrase :+ possessum-mod-rule.

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].
